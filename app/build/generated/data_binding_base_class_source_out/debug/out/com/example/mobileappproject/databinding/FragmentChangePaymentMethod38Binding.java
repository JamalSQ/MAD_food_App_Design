// Generated by view binder compiler. Do not edit!
package com.example.mobileappproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mobileappproject.R;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentChangePaymentMethod38Binding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnConfirmPayment;

  @NonNull
  public final View horizontalLine1;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final LinearLayout llPaymentMethods;

  @NonNull
  public final MaterialToolbar materialToolbar2;

  @NonNull
  public final RecyclerView rvPaymentMethods;

  private FragmentChangePaymentMethod38Binding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnConfirmPayment, @NonNull View horizontalLine1,
      @NonNull LinearLayout linearLayout, @NonNull LinearLayout llPaymentMethods,
      @NonNull MaterialToolbar materialToolbar2, @NonNull RecyclerView rvPaymentMethods) {
    this.rootView = rootView;
    this.btnConfirmPayment = btnConfirmPayment;
    this.horizontalLine1 = horizontalLine1;
    this.linearLayout = linearLayout;
    this.llPaymentMethods = llPaymentMethods;
    this.materialToolbar2 = materialToolbar2;
    this.rvPaymentMethods = rvPaymentMethods;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentChangePaymentMethod38Binding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentChangePaymentMethod38Binding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_change_payment_method_38, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentChangePaymentMethod38Binding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnConfirmPayment;
      Button btnConfirmPayment = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirmPayment == null) {
        break missingId;
      }

      id = R.id.horizontalLine1;
      View horizontalLine1 = ViewBindings.findChildViewById(rootView, id);
      if (horizontalLine1 == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.llPaymentMethods;
      LinearLayout llPaymentMethods = ViewBindings.findChildViewById(rootView, id);
      if (llPaymentMethods == null) {
        break missingId;
      }

      id = R.id.materialToolbar2;
      MaterialToolbar materialToolbar2 = ViewBindings.findChildViewById(rootView, id);
      if (materialToolbar2 == null) {
        break missingId;
      }

      id = R.id.rvPaymentMethods;
      RecyclerView rvPaymentMethods = ViewBindings.findChildViewById(rootView, id);
      if (rvPaymentMethods == null) {
        break missingId;
      }

      return new FragmentChangePaymentMethod38Binding((ConstraintLayout) rootView,
          btnConfirmPayment, horizontalLine1, linearLayout, llPaymentMethods, materialToolbar2,
          rvPaymentMethods);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
